# find the os
UNAME_S           := $(shell uname -s)

#The Target Binary Program
COMPONENT_NAME    := ort

#Set this to @ to keep the makefile quiet
#SILENCE = @

#We try to detect the OS we are running on, and adjust commands as needed
ifeq ($(OS),Windows_NT)
  ifeq ($(UNAME_S),) # not in a bash-like shell
	CLEANUP = del /F /Q
	MKDIR = mkdir
  else # in a bash-like shell, like msys
	CLEANUP = rm -rf
	MKDIR = mkdir -p
  endif
	TARGET_EXTENSION=.exe
else
	CLEANUP = rm -rf
	MKDIR = mkdir -p
	TARGET_EXTENSION=
endif

C_COMPILER=gcc
ifeq ($(UNAME_S), Darwin)
C_COMPILER=clang
endif

#Common variables for Direcories and Files.
SRC_DIRS          := src
INCDIR            := inc
BUILDDIR          := obj
TARGETDIR         := bin
RESDIR            := res
SRCEXT            := c
TESTEXT           := c
OBJEXT            := o
DEPEXT            := d
RESULT_EXT        := txt
UNITY_ROOT        =../Unity
TEST_SRC_DIRS     := test-src
PATH_TEST_BUILD   := build
PATH_TEST_DEPS    := build/depends
PATH_TEST_OBJECTS := build/objs
PATH_TEST_RESULTS := build/results
PATH_TEST_RUNNERS := build/test_runners

PASSED = `grep -s PASS $(PATH_TEST_RESULTS)/*.txt`
FAIL = `grep -s FAIL $(PATH_TEST_RESULTS)/*.txt`
IGNORE = `grep -s IGNORE $(PATH_TEST_RESULTS)/*.txt`

# --- MOCKS_SRC_DIRS ---
# MOCKS_SRC_DIRS specifies a directories where you can put your
# mocks, stubs and fakes.  You can also just put them
# in TEST_SRC_DIRS
MOCKS_SRC_DIRS += test-src/mocks

#Build Link Flags, and Libraries
CFLAGS      :=
LIB         := -lm -lcurl -lmosquitto -pthread
INC         := -I$(INCDIR) -I . -I duktape
INCDEP      := -I$(INCDIR)
TEST_INC    := -I$(SRC_DIRS) -I$(UNITY_ROOT)/src $(INC) -DTEST

TARGET_BASE1=test1
TARGET_BASE2=test2
TARGET1 = $(TARGET_BASE1)$(TARGET_EXTENSION)
TARGET2 = $(TARGET_BASE2)$(TARGET_EXTENSION)
SRC_FILES1=$(UNITY_ROOT)/src/unity.c src/ProductionCode.c  $(TEST_SRC_DIRS)/TestProductionCode.c  $(PATH_TEST_RUNNERS)/TestProductionCode_Runner.c
SRC_FILES2=$(UNITY_ROOT)/src/unity.c src/ProductionCode2.c $(TEST_SRC_DIRS)/TestProductionCode2.c $(PATH_TEST_RUNNERS)/TestProductionCode2_Runner.c
INC_DIRS=-Isrc -I$(UNITY_ROOT)/src
SYMBOLS=

#---------------------------------------------------------
# Build Commands 
#---------------------------------------------------------
SRC_FILES      := $(shell find $(SRC_DIRS) -type f -name *.$(SRCEXT))
TEST_SRC_FILES += $(shell find $(TEST_SRC_DIRS) -type f -name Test*.$(TESTEXT))
OBJECTS        := $(patsubst $(SRC_DIRS)/%,$(BUILDDIR)/%,$(SRC_FILES:.$(SRCEXT)=.$(OBJEXT)))
TEST_OBJECTS   := $(patsubst $(TEST_SRC_DIRS)/%,$(PATH_TEST_OBJECTS)/%,$(SRC_FILES:.$(TESTEXT)=.$(OBJEXT)))
RESOURCES      := $(shell find $(RESDIR) -type f)
RESULTS        := $(patsubst $(TEST_SRC_DIRS)/%,$(PATH_TEST_RESULTS)/%,$(TEST_SRC_FILES:.$(TESTEXT)=.$(RESULT_EXT)))


# if running on Mac OS enable debugging.
ifeq ($(UNAME_S),Darwin)
	CFLAGS += -D MAC_DEBUG=1
endif

all: info resources test $(COMPONENT_NAME)

#Make the Directories
directories:
	@mkdir -p $(TARGETDIR)
	@mkdir -p $(BUILDDIR)
	@mkdir -p $(PATH_TEST_RUNNERS)
	@mkdir -p $(PATH_TEST_BUILD)
	@mkdir -p $(PATH_TEST_DEPS)
	@mkdir -p $(PATH_TEST_OBJECTS)
	@mkdir -p $(PATH_TEST_RESULTS)
	
test: directories $(RESULTS)
	@echo "-----------------------\nIGNORES:\n-----------------------"
	@echo "$(IGNORE)"
	@echo "-----------------------\nFAILURES:\n-----------------------"
	@echo "$(FAIL)"
	@echo "-----------------------\nPASSED:\n-----------------------"
	@echo "$(PASSED)" 
	@echo "\nDONE"
	! grep -s FAIL $(PATH_TEST_RESULTS)/*.txt



#$(PATH_TEST_BUILD)/test%$(TARGET_EXTENSION)
$(PATH_TEST_RESULTS)/Test%.txt: $(TARGET1) $(TARGET2)
	echo "PASS 5" > $@ 2>&1
#	-./$< > $@ 2>&1

$(TARGET1): $(SRC_FILES1)
	$(C_COMPILER) $(CFLAGS) $(INC_DIRS) $(SYMBOLS) $(SRC_FILES1) -o $(TARGET1)

$(TARGET2): $(SRC_FILES2)
	$(C_COMPILER) $(CFLAGS) $(INC_DIRS) $(SYMBOLS) $(SRC_FILES2) -o $(TARGET2)

$(PATH_TEST_RUNNERS)/Test%_Runner.c: $(TEST_SRC_DIRS)/Test%.c
	ruby $(UNITY_ROOT)/auto/generate_test_runner.rb $< $@

clean:
	@$(CLEANUP) $(BUILDDIR)
	@$(CLEANUP) $(TARGETDIR)
	@$(CLEANUP) $(PATH_TEST_OBJECTS)/*.o
	@$(CLEANUP) $(PATH_TEST_BUILD)/*
	@$(CLEANUP) $(PATH_TEST_RESULTS)/*.txt
	@$(CLEANUP) $(TARGET1) $(TARGET2)

info:
	@echo "INFO!"
	@echo "SOURCES=$(SRC_FILES)"
	@echo "TEST_SRC_FILES=$(TEST_SRC_FILES)"
	@echo "OBJECTS=$(OBJECTS)"
	@echo "TEST_OBJECTS=$(TEST_OBJECTS)"
	@echo "CC=$(CC)"
	@echo "CFLAGS=$(CFLAGS)"
	@echo "LDFLAGS=$(LDFLAGS)"
	@echo "LIB=$(LIB)"
	@echo "RESOURCES=$(RESOURCES)"
	@echo "BUILD_PATHS=$(BUILD_PATHS)"
	@echo "RESULTS=$(RESULTS)"
	@echo "PATH_TEST_RESULTS=$(PATH_TEST_RESULTS)"
	@echo "Result command: $(PATH_TEST_RESULTS)/%.$(RESULT_EXT): $(PATH_TEST_BUILD)/%"
	@echo "UNAME_S= $(UNAME_S)"

#Copy Resources from Resources Directory to Target Directory
resources: directories
ifneq ($(RESOURCES),)
	@cp -r $(RESDIR)/* $(TARGETDIR)/
endif

#Link
$(COMPONENT_NAME): $(OBJECTS)
	@mkdir -p $(TARGETDIR)
	@echo "Build with $(CC)"
	@echo " Linking... $^"
	$(CC) -o $(TARGETDIR)/$(COMPONENT_NAME) $^ $(LIB)

#Compile
$(BUILDDIR)/%.$(OBJEXT): $(SRC_DIRS)/%.$(SRCEXT)
	@mkdir -p $(dir $@)
	@echo " Compiling....  $@"
	$(CC) $(CFLAGS) $(INC) -c -o $@ $<

ci: CFLAGS += -Werror
ci: default
