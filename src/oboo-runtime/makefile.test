# find the os
UNAME_S           := $(shell uname -s)

#The Target Binary Program
COMPONENT_NAME    := ort

#Set this to @ to keep the makefile quiet
#SILENCE = @

#We try to detect the OS we are running on, and adjust commands as needed
ifeq ($(OS),Windows_NT)
  ifeq ($(UNAME_S),) # not in a bash-like shell
	CLEANUP = del /F /Q
	MKDIR = mkdir
  else # in a bash-like shell, like msys
	CLEANUP = rm -rf
	MKDIR = mkdir -p
  endif
	TARGET_EXTENSION=.exe
else
	CLEANUP = rm -rf
	MKDIR = mkdir -p
	TARGET_EXTENSION=
endif

C_COMPILER=gcc
ifeq ($(UNAME_S), Darwin)
C_COMPILER=clang
endif

#Common variables for Direcories and Files.
SRC_DIRS          := src
INCDIR            := inc
BUILDDIR          := obj
TARGETDIR         := bin
RESDIR            := res
SRCEXT            := c
TESTEXT           := c
OBJEXT            := o
DEPEXT            := d
RESULT_EXT        := txt
UNITY_ROOT        =../Unity
PATH_TEST_SRC     := test-src
PATH_TEST_BUILD   := build
PATH_TEST_DEPS    := build/depends
PATH_TEST_OBJECTS := build/objs
PATH_TEST_RESULTS := build/results
PATH_TEST_RUNNERS := build/test_runners

RESULTS = $(patsubst $(PATH_TEST_SRC)/Test%.c,$(PATH_TEST_RESULTS)/Test%.txt,$(TEST_SRC_FILES) )

PASSED = `grep -s PASS $(PATH_TEST_RESULTS)/*.txt`
FAIL = `grep -s FAIL $(PATH_TEST_RESULTS)/*.txt`
IGNORE = `grep -s IGNORE $(PATH_TEST_RESULTS)/*.txt`

# --- MOCKS_SRC_DIRS ---
# MOCKS_SRC_DIRS specifies a directories where you can put your
# mocks, stubs and fakes.  You can also just put them
# in TEST_SRC_DIRS
#MOCKS_SRC_DIRS += test-src/mocks

#Build Link Flags, and Libraries
CFLAGS      :=
LIB         := -lm -lcurl -lmosquitto -pthread
INC         := -I$(INCDIR) -I . -I duktape
INCDEP      := -I$(INCDIR)
TEST_INC    := -I$(SRC_DIRS) -I$(UNITY_ROOT)/src $(INC) -DTEST

TARGET_BASE1=test1
TARGET_BASE2=test2
TARGET1 = $(TARGET_BASE1)$(TARGET_EXTENSION)
TARGET2 = $(TARGET_BASE2)$(TARGET_EXTENSION)
SRC_FILES1=$(UNITY_ROOT)/src/unity.c src/ProductionCode.c  $(PATH_TEST_SRC)/TestProductionCode.c  $(PATH_TEST_RUNNERS)/TestProductionCode_Runner.c
SRC_FILES2=$(UNITY_ROOT)/src/unity.c src/ProductionCode2.c $(PATH_TEST_SRC)/TestProductionCode2.c $(PATH_TEST_RUNNERS)/TestProductionCode2_Runner.c
INC_DIRS=-Isrc -I$(UNITY_ROOT)/src
SYMBOLS=

all: clean directories default

#Make the Directories
directories:
	@mkdir -p $(TARGETDIR)
	@mkdir -p $(BUILDDIR)
	@mkdir -p $(PATH_TEST_RUNNERS)
	@mkdir -p $(PATH_TEST_BUILD)
	@mkdir -p $(PATH_TEST_DEPS)
	@mkdir -p $(PATH_TEST_OBJECTS)
	@mkdir -p $(PATH_TEST_RESULTS)
	
default: $(SRC_FILES1) $(SRC_FILES2)
	$(C_COMPILER) $(CFLAGS) $(INC_DIRS) $(SYMBOLS) $(SRC_FILES1) -o $(TARGET1)
	$(C_COMPILER) $(CFLAGS) $(INC_DIRS) $(SYMBOLS) $(SRC_FILES2) -o $(TARGET2)
	- ./$(TARGET1)
	- ./$(TARGET2)

$(PATH_TEST_RUNNERS)/Test%_Runner.c: $(PATH_TEST_SRC)/Test%.c
	ruby $(UNITY_ROOT)/auto/generate_test_runner.rb $< $@

clean:
	@$(CLEANUP) $(BUILDDIR)
	@$(CLEANUP) $(TARGETDIR)
	@$(CLEANUP) $(PATH_TEST_OBJECTS)/*.o
	@$(CLEANUP) $(PATH_TEST_BUILD)/*
	@$(CLEANUP) $(PATH_TEST_RESULTS)/*.txt
	@$(CLEANUP) $(TARGET1) $(TARGET2)

ci: CFLAGS += -Werror
ci: default
